
name: build and verify manifest
on: [push]
jobs:
  filter_for_configs:
    name: filter for configs folder changes
    runs-on: ubuntu-latest
    outputs:
      configs: ${{ steps.filter.outputs.configs }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            configs:
              - 'configs/**'

  build_manifest:
    name: build manifest and push to testing release
    needs: filter_for_configs
    if: ${{ needs.filter_for_configs.outputs.configs == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - run: python -m pip install requests
      - name: Build manifest
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import os, requests, json, sys
            configs = []
            for filename in os.scandir('configs'):
              with open(filename, mode='r', encoding='utf-8') as file:
                configs.append(json.load(file))
            with open("manifest.json", mode='w', encoding='utf-8') as f:
              f.truncate(0)
              json.dump(configs, f)
      - uses: actions/upload-artifact@master
        with:
          name: my-artifact
          path: ./
      - uses: actions/download-artifact@v3
        with:
          name: my-artifact
          path: /home/runner/work
      - name: update testing pre-release
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: testing
          tag: testing
          allow_override: true
          prerelease: true
          files: manifest.json
          gzip: false
      - name: verify manifest
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import os, requests, json, sys
                    
            # validation
            url = 'https://app.logz.io/telemetry-agent/public/manifest/validate'
            with open("/home/runner/work/manifest.json", mode='r', encoding='utf-8') as f:
              manifest = json.load(f)
              response = requests.post(url, json = manifest)
            isValid = response.json()['valid']
            if isValid != True:
              message = (response.json()['message'])
              sys.exit(message)
            else:
              print('Validation pass')